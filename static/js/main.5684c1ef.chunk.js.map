{"version":3,"sources":["NumberConverterForm.tsx","Utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["NumberConverterForm","props","handleTextChange","event","setState","numberToConvert","target","value","handleOnSave","state","onSave","type","data-test","onChange","this","onClick","React","convertMoney","number","parseFloat","isNaN","toLocaleString","minimumFractionDigits","replace","App","result","handleSave","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAUqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,iBAAmB,SAACC,GAChB,EAAKC,SAAS,CAAEC,gBAAiBF,EAAMG,OAAOC,SAR/B,EAWnBC,aAAe,WAAa,IAChBH,EAAoB,EAAKI,MAAzBJ,iBAERK,EADmB,EAAKT,MAAhBS,QACDL,IAZP,EAAKI,MAAQ,CACTJ,gBAAiB,IAHN,E,qDAkBf,OACI,2BACI,yBACIM,KAAK,OACLC,YAAU,cACVC,SAAUC,KAAKZ,iBACfK,MAAOO,KAAKL,MAAMJ,kBAEtB,0BAAQO,YAAU,eAAeG,QAASD,KAAKN,oB,GA3BdQ,aCVpCC,EAAe,SAACZ,GACzB,IAAMa,EAASC,WAAWd,GAC1B,OAAIe,MAAMF,GACC,eAEeA,EAAOG,eAAe,QAAS,CAAEC,sBAAuB,IAAKC,QAAQ,IAAK,MCqBzFC,E,4MArBXf,MAAQ,CAAEgB,OAAQ,I,EAElBC,WAAa,SAACrB,GACV,IAAMoB,EAASR,EAAaZ,GACb,iBAAXoB,EACA,EAAKrB,SAAS,CAAEqB,OAAQ,iBAExB,EAAKrB,SAAS,CAAEqB,OAAQA,K,uDAK5B,OACI,6BACI,kBAAC,EAAD,CAAqBf,OAAQI,KAAKY,aAClC,wCAAcZ,KAAKL,MAAMgB,a,GAhBvBE,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5684c1ef.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface NumberConverterProps {\n    onSave: (numberToConvert: string) => void;\n}\n\ninterface NumberConverterState {\n    numberToConvert: string;\n}\n\nexport default class NumberConverterForm extends React.Component<NumberConverterProps, NumberConverterState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberToConvert: '',\n        };\n    }\n\n    handleTextChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ numberToConvert: event.target.value });\n    };\n\n    handleOnSave = (): void => {\n        const { numberToConvert } = this.state;\n        const { onSave } = this.props;\n        onSave(numberToConvert);\n    };\n\n    render() {\n        return (\n            <div>\n                <input\n                    type=\"text\"\n                    data-test=\"inputNumber\"\n                    onChange={this.handleTextChange}\n                    value={this.state.numberToConvert}\n                />\n                <button data-test=\"submitButton\" onClick={this.handleOnSave} />\n            </div>\n        );\n    }\n}\n","export const convertMoney = (numberToConvert: string): string => {\n    const number = parseFloat(numberToConvert);\n    if (isNaN(number)) {\n        return 'not a number';\n    } else {\n        const displayResult = number.toLocaleString('fr-FR', { minimumFractionDigits: 2 }).replace(',', '.');\n        return displayResult;\n    }\n};\n\nexport const inputData = (inputData: string): void => {\n    cy.get('[data-test=\"inputNumber\"]').type(inputData);\n    cy.get('[data-test=\"submitButton\"]').click();\n};\n","import React, { Component } from 'react';\nimport NumberConverterForm from './NumberConverterForm';\nimport { convertMoney } from './Utils';\n\nclass App extends Component {\n    state = { result: '' };\n\n    handleSave = (numberToConvert: string) => {\n        const result = convertMoney(numberToConvert);\n        if (result === 'not a number') {\n            this.setState({ result: 'not a number' });\n        } else {\n            this.setState({ result: result });\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <NumberConverterForm onSave={this.handleSave} />\n                <p>Result is {this.state.result}</p>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}